<?php

/*
 * This file is licensed under GPLv2+.
*/

/**
 * @file
 * Provides QqlogIn interface for drupal.
 */

function qqlogin_init() {
	$appid=variable_get('qqlogin_appid');
	if(empty($appid)) return;
	drupal_add_html_head(array(
		'#tag' => 'meta',
		'#attributes' => array(
			'property' => 'qc:admins',
			'content' => variable_get('qqlogin_verifycode','')
		),
	),'openqq');
}

/**
 * Implementation of hook_menu().
 */
function qqlogin_menu() {
	$items['admin/config/services/qqlogin'] = array(
		'title' => 'QQ Login settings',
		'description' => 'QQ Login settings.',
		'access arguments' => array('access administration pages'),
		'page callback' => 'drupal_get_form',
		'page arguments' => array('qqlogin_admin_form'),
	);
	$items['user/login/qqlogin'] = array(
		'type' => MENU_CALLBACK,
		'page callback' => 'qqlogin_login_callback',
		'access callback' => 'qqlogin_login_callback_access',
	);
	$items['user/%user/qqlogin'] = array(
		'type' => MENU_LOCAL_TASK,
		'title' => 'QQ Login binding',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('qqlogin_login_binding_form', 1),
		'access callback' => 'qqlogin_login_binding_form_access',
		'access arguments' => array(1),
	);
	$items['user/%user/qqlogin_callback'] = array(
		'type' => MENU_CALLBACK,
		'page callback' => 'qqlogin_login_binding_callback',
		'page arguments' => array(1),
		'access callback' => 'user_edit_access',
		'access arguments' => array(1),
	);
	return $items;
}

/**
 * Implementation of hook_uninstall().
 */
function qqlogin_uninstall() {
	$settings=array(
		'appid', 'appkey', 'verifycode'
	);
	foreach($settings as $s) {
		variable_del('qqlogin_'.$s);
	}
}

function qqlogin_admin_form($form, $form_state) {
	$form=array(
		'#submit' => array('qqlogin_admin_form_submit'),
	);
	$form['appid'] = array(
		'#type' => 'textfield',
		'#title' => t('QQ OpenSNS APP ID'),
		'#default_value' => variable_get('qqlogin_appid',''),
		'#required' => TRUE,
		'#size' => 60,
		'#maxlength' => 80,
	);
	$form['appkey'] = array(
		'#type' => 'textfield',
		'#title' => t('QQ OpenSNS APP Key'),
		'#default_value' => variable_get('qqlogin_appkey', ''),
		'#required' => TRUE,
		'#size' => 60,
		'#maxlength' => 80,
	);
	$form['verifycode'] = array(
		'#type' => 'textfield',
		'#title' => t('QQ OpenSNS Verify Code'),
		'#default_value' => variable_get('qqlogin_verifycode',''),
		'#required' => TRUE,
		'#size' => 60,
		'#maxlength' => 80,
	);
	return system_settings_form($form);
}

function qqlogin_admin_form_validate($form, $form_state) {
}

function qqlogin_admin_form_submit($form, $form_state) {
	$settings=array(
		'appid', 'appkey', 'verifycode'
	);
	foreach($settings as $s) {
		variable_set('qqlogin_'.$s,trim($form_state['values'][$s]));
	}
}

function qqlogin_form_user_login_alter(&$form, &$form_state) {
	$appid=variable_get('qqlogin_appid');
	if(empty($appid)) return;
	$form['actions']['qqlogin']=array(
		'#type' => 'image_button',
		'#src' => 'http://qzonestyle.gtimg.cn/qzone/vas/opensns/res/img/Connect_logo_4.png',
		'#attributes' => array('title'=>t('Login via QQ User')),
		'#limit_validation_errors' => array(),
		'#validate' => array(),
		'#submit' => array('qqlogin_form_user_login_qqlogin_submit'),
	);
}

function qqlogin_form_user_login_block_alter(&$form, &$form_state) {
	$appid=variable_get('qqlogin_appid');
	if(empty($appid)) return;
	qqlogin_form_user_login_alter($form, $form_state);
	$form['#action']='';
	$form['actions']['qqlogin']['#src']='http://qzonestyle.gtimg.cn/qzone/vas/opensns/res/img/Connect_logo_1.png';
}

function qqlogin_form_user_login_qqlogin_submit($form, &$form_state) {
	$form_state['redirect']=sprintf(
		'https://graph.qq.com/oauth2.0/authorize?response_type=code&client_id=%s&redirect_uri=%s&scope=%s&display=%s',
		variable_get('qqlogin_appid',''),
		$GLOBALS['base_url'].base_path().'user/login/qqlogin',
		'get_user_info',
		preg_match('/Mobile/',$_SERVER['HTTP_USER_AGENT'])?'mobile':'desktop'
	);
}

function qqlogin_form_user_register_form_alter(&$form, $form_state) {
	$appid=variable_get('qqlogin_appid');
	if(empty($appid)) return;
	$form['actions']['qqlogin']=array(
		'#type' => 'image_button',
		'#src' => 'http://qzonestyle.gtimg.cn/qzone/vas/opensns/res/img/Connect_logo_4.png',
		'#attributes' => array('title'=>t('Login via QQ User')),
		'#limit_validation_errors' => array(),
		'#submit' => array('qqlogin_form_user_login_qqlogin_submit'),
	);
}

function qqlogin_form_user_profile_form_alter(&$form, $form_state) {
	if(!db_query('SELECT EXISTS(SELECT * FROM {qqlogin} WHERE uid=:uid)', array(':uid'=>$form['#user']->uid))->fetchField())
		return;
	$form['account']['pass']['#type']='hidden';
	$form['account']['current_pass']['#type']='hidden';
	if(!isset($form['account']['socialnetwork']))
		$form['account']['socialnetwork']=array(
			'#type' => 'item',
			'#title' => t('Password Changing'),
			'#markup' => t('You do not need to change your password, because your account is bound with QQ user !nickname.',
				array('!nickname'=>db_query('SELECT name FROM {qqlogin} WHERE uid=:uid', array(':uid'=>$form['#user']->uid))->fetchField())),
		);
	else
		$form['account']['socialnetwork']=array(
			'#type' => 'item',
			'#title' => t('Password Changing'),
			'#markup' => t('You do not need to change your password, because your account is bound with multiple social networks.'),
		);
}

function qqlogin_login_callback_access() {
	if(!user_is_anonymous()) return FALSE;
	$appid=variable_get('qqlogin_appid');
	if(empty($appid)) return FALSE;
	return TRUE;
}

function qqlogin_login_callback() {
	// The callback function for qqlogin
	if(isset($_GET['code'])) {
		// Step 2: Get Access Token via Authorization Code
		$authcode=$_GET['code'];
		$url=sprintf('https://graph.qq.com/oauth2.0/token?grant_type=authorization_code&client_id=%s&client_secret=%s&code=%s&redirect_uri=%s',
			variable_get('qqlogin_appid',''),
			variable_get('qqlogin_appkey',''),
			$authcode,
			$GLOBALS['base_url'].base_path().'user/login/qqlogin'
		);
		$r=drupal_http_request($url);
		// Process the return data of access token fetching
		if(is_object($r) && $r->code == '200') {
			parse_str($r->data, $ret);
			$access_token=$ret['access_token'];
			// Step 3: Get openid from access token
			$url=sprintf('https://graph.z.qq.com/moc2/me?access_token=%s', $access_token);
			$r=drupal_http_request($url);
			if(is_object($r) && $r->code == '200') {
				parse_str($r->data, $ret);
				if(isset($ret['openid'])) {
					$openid=$ret['openid'];
					$user=user_external_load('qq_openid_'.$openid);
					if(!empty($user) && $user->status==0) {
						drupal_set_message(t('The user !name has not been activated or is blocked.', array('!name' => format_username($user))), 'error');
						drupal_goto('user/login');
						return;
					}
					user_external_login_register('qq_openid_'.$openid, 'qqlogin');
					$user=user_load($GLOBALS['user']->uid);
					if(empty($user->mail))
						user_save($user, array('mail'=>$openid.'@opensns.qq.com'));
					$i=db_merge('qqlogin')->key(array('uid'=>$user->uid))->fields(array(
						'uid' => $user->uid,
						'openid' => $openid,
						'access_token' => $access_token,
					))->execute();
					// Fetch user nick name and save it into database
					$url=sprintf('https://graph.qq.com/user/get_user_info?access_token=%s&oauth_consumer_key=%s&openid=%s',
						$access_token,
						variable_get('qqlogin_appid',''),
						$openid
					);
					$r=drupal_http_request($url);
					if(is_object($r) && $r->code == '200') {
						$ret=json_decode($r->data);
						if($ret->ret==0) {
							db_update('qqlogin')->condition('openid',$openid)->fields(array(
								'name' => $ret->nickname,
							))->execute();
						}
					}
					if($i==MergeQuery::STATUS_INSERT)
						drupal_goto('user/'.$GLOBALS['user']->uid.'/edit');
					else
						drupal_goto('user');
				}
			}
		}
	}
	else drupal_goto('user/login');
}

function qqlogin_login_binding_form_access($account) {
	$appid=variable_get('qqlogin_appid');
	if(empty($appid)) return FALSE;
	return user_edit_access($account);
}

function qqlogin_login_binding_form($form, &$form_state, $account) {
	$form_state['storage']['user']=$account;
	$r=db_query('SELECT * FROM {qqlogin} WHERE uid=:uid', array(':uid'=>$account->uid))->fetchObject();
	if($r) {
		if($r->access_token) {
			$url=sprintf('https://graph.qq.com/user/get_user_info?access_token=%s&oauth_consumer_key=%s&openid=%s',
				$r->access_token,
				variable_get('qqlogin_appid',''),
				$r->openid
			);
			$q=drupal_http_request($url);
			if(is_object($q) && $q->code == '200') {
				$ret=json_decode($q->data);
				if($ret->ret==0) {
					$r->name=$ret->nickname;
					db_update('qqlogin')->condition('openid',$r->openid)->fields(array(
						'name' => $ret->nickname,
					))->execute();
					$r->face=$ret->figureurl_qq_1;
				} else if($ret->ret=='100030') {
					db_delete('qqlogin')->condition('uid',$account->uid)->execute();
					user_set_authmaps($account, array("authname_qqlogin" => ''));
					watchdog('user', 'Automatically detached from QQ user @nick.', array('@nick' => $r->name));
					drupal_set_message(t('!nick has revolked authorization from QQ.com'), 'warning');
					$r=0;
				}
			}
		}
	}
	if($r) {
		$form['desc']=array(
			'#type' => 'item',
			'#markup' => t('You are now bound with following QQ user.')
		);
		$form_state['storage']['qqnickname']=$r->name;
		$form_state['storage']['qqopenid']=$r->openid;
		$form['qquser']=array(
			'#type' => 'item',
			'#markup' => $r->name,
			'#prefix' => '<div style="padding-left: 50px;">',
			'#suffix' => '</div>',
		);
		if(isset($r->face))
			$form['qquser']['#prefix'].=sprintf('<img src="%s" style="vertical-align:middle"/> ', $r->face);
		else
			$form['qquser']['#prefix'].=sprintf('<img src="%s"/>', 'http://qzonestyle.gtimg.cn/qzone/vas/opensns/res/img/Connect_logo_1.png');
		$form['detach']=array(
			'#type' => 'submit',
			'#value' => t('Detach my account with above QQ user'),
			'#submit' => array('qqlogin_login_binding_form_submit_detach')
		);
	} else {
		if(isset($_SESSION['qq_dup_account'])) {
			$form['error']=array(
				'#markup' => '<div class="messages error">'.t('!nickname is already bound with another account.', array('!nickname'=>$_SESSION['qq_dup_account'])).
							t('If you still want to bind with current user, please do as following steps:').'<br/>'.
							'<ol><li>'.l(t('Logout now'), 'user/logout').'</li><li>'.
							t('Login in via QQ User !nickname', array('!nickname'=>$_SESSION['qq_dup_account'])).'</li><li>'.
							t('Detach QQ user from newly logged in user').'</li><li>'.
							t('Login in as !name again', array('!name'=>$account->name)).
							'</li></ol></div>',
			);
			unset($_SESSION['qq_dup_account']);
		}
		$form['desc']=array(
			'#type' => 'item',
			'#markup' => t('You have not bound your account with QQ user.').t('Click following button to bound your account.')
		);
		$form['submit']=array(
			'#type' => 'image_button',
			'#src' => 'http://qzonestyle.gtimg.cn/qzone/vas/opensns/res/img/Connect_logo_4.png',
			'#submit' => array('qqqlogin_login_binding_form_submit_bound'),
		);
	}
	return $form;
}

function qqlogin_login_binding_form_submit_detach($form, $form_state) {
	$account=$form_state['storage']['user'];
	db_delete('qqlogin')->condition('uid',$account->uid)->execute();
	user_set_authmaps($form_state['storage']['user'], array("authname_qqlogin" => ''));
	drupal_set_message(t('Successfully detached from @nickname.', array('@nickname'=>$form_state['storage']['qqnickname'])));
	watchdog('user', 'Detached from QQ user @nick.', array('@nick' => $form_state['storage']['qqnickname']));
	if($account->name=='qq_openid_'.$form_state['storage']['qqopenid']) {
		$i=0;
		do {
			$newusername=$form_state['storage']['qqnickname'];
			if($i) $newusername.=$i;
			$i++;
		} while(user_load_by_name($newusername));
		$userpass=user_password();
		user_save($account, array('name'=>$newusername, 'pass'=>$userpass));
		drupal_set_message(t('As you are registered via QQ user, we have renewed your account. Your username name is @username, and your password is @pass.', array('@username'=>$newusername, '@pass'=>$userpass)), 'warning');
	} else {
		$userpass=user_password();
		if($account->uid>1) {
			user_save($account, array('pass'=>$userpass));
			drupal_set_message(t('For your safe, we have regenerate your password as @pass.', array('@pass'=>$userpass)), 'warning');
		}
	}
	if($account->mail==$form_state['storage']['qqopenid'].'@opensns.qq.com' || is_null($account->mail))
		user_save($account, array('mail'=>NULL));
}

function qqqlogin_login_binding_form_submit_bound($form, &$form_state) {
	$_SESSION['userid']=md5($form_state['storage']['user']->uid);
	$_SESSION['checksum']=md5(time());
	$form_state['redirect']=sprintf(
		'https://graph.qq.com/oauth2.0/authorize?response_type=code&client_id=%s&redirect_uri=%s&scope=%s&state=%s&display=%s',
		variable_get('qqlogin_appid',''),
		$GLOBALS['base_url'].base_path().'user/'.$form_state['storage']['user']->uid.'/qqlogin_callback',
		'get_user_info',
		$_SESSION['checksum'],
		preg_match('/Mobile/',$_SERVER['HTTP_USER_AGENT'])?'mobile':'desktop'
	);
}

function qqlogin_login_binding_callback($account) {
	if(isset($_GET['code']) || $_SESSION['checksum'] != $_GET['state']) {
		// Step 2: Get Access Token via Authorization Code
		$authcode=$_GET['code'];
		$url=sprintf('https://graph.qq.com/oauth2.0/token?grant_type=authorization_code&client_id=%s&client_secret=%s&code=%s&redirect_uri=%s',
			variable_get('qqlogin_appid',''),
			variable_get('qqlogin_appkey',''),
			$authcode,
			$GLOBALS['base_url'].base_path().'user/'.$account->uid.'/qqlogin'
		);
		$r=drupal_http_request($url);
		// Process the return data of access token fetching
		if(is_object($r) && $r->code == '200') {
			parse_str($r->data, $ret);
			$access_token=$ret['access_token'];
			// Step 3: Get openid from access token
			$url=sprintf('https://graph.z.qq.com/moc2/me?access_token=%s', $access_token);
			$r=drupal_http_request($url);
			if(is_object($r) && $r->code == '200') {
				parse_str($r->data, $ret);
				if(isset($ret['openid'])) {
					$openid=$ret['openid'];
					if(db_query('SELECT EXISTS(SELECT * FROM {qqlogin} WHERE openid=:openid)', array(':openid'=>$openid))->fetchField()) {
						// Fetch user nick name and save it into database
						$url=sprintf('https://graph.qq.com/user/get_user_info?access_token=%s&oauth_consumer_key=%s&openid=%s',
							$access_token,
							variable_get('qqlogin_appid',''),
							$openid
						);
						$r=drupal_http_request($url);
						if(is_object($r) && $r->code == '200') {
							$ret=json_decode($r->data);
							$nick=$ret->nickname;
						} else $nick=t('This QQ user');
						$_SESSION['qq_dup_account']=$nick;
					} else {
						if(empty($account->mail))
							user_save($account, array('mail'=>$openid.'@opensns.qq.com'));
						user_set_authmaps($account, array("authname_qqlogin" => 'qq_openid_'.$openid));
						$i=db_merge('qqlogin')->key(array('uid'=>$account->uid))->fields(array(
							'uid' => $account->uid,
							'openid' => $openid,
							'access_token' => $access_token,
						))->execute();
						// Fetch user nick name and save it into database
						$url=sprintf('https://graph.qq.com/user/get_user_info?access_token=%s&oauth_consumer_key=%s&openid=%s',
							$access_token,
							variable_get('qqlogin_appid',''),
							$openid
						);
						$r=drupal_http_request($url);
						if(is_object($r) && $r->code == '200') {
							$ret=json_decode($r->data);
							if($ret->ret==0) {
								db_update('qqlogin')->condition('openid',$openid)->fields(array(
									'name' => $ret->nickname,
								))->execute();
							}
						}
						drupal_set_message(t('Successfully bound with @nickname.', array('@nickname'=>empty($ret->nickname)?t('QQ User'):$ret->nickname)));
						watchdog('user', 'Bound with QQ user @nick.', array('@nick' => empty($ret->nickname)?t('QQ User'):$ret->nickname));
					}
				}
			}
		}
	}
	drupal_goto('user/'.$account->uid.'/qqlogin');
}

function qqlogin_username_alter(&$username, $account) {
	$r=db_query('SELECT * FROM {qqlogin} WHERE uid=:uid', array(':uid'=>$account->uid))->fetchObject();
	if($r && $account->name=='qq_openid_'.$r->openid) {
		if(empty($r->name))
			$username=t('QQ User');
		else {
			$username=$r->name;
		}
	}
}

function qqlogin_user_delete($account) {
	db_delete('qqlogin')->condition('uid', $account->uid)->execute();
}

?>
